{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manrith\\\\Documents\\\\GitHub\\\\Steam-Market-Analysis\\\\Steam-Market-Analysis\\\\front_end\\\\src\\\\components\\\\ViewItemPriceChartAnalysis.js\";\nimport React from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"../../node_modules/react-fusioncharts\";\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json(); //   useEffect(() => {\n//     axios\n//     .get(\"/view_item_price_history\", {\n//       params: {\n//         item_name,\n//       },\n//     })\n//     .then(({ data }) => {\n//       setPriceHistory(data.price_history);\n//     })\n//   }, []);\n\n\nconst dataFetch = fetch(\"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/different-plot-type-for-each-variable-measure-data.json\").then(jsonify);\nconst schemaFetch = fetch(\"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/different-plot-type-for-each-variable-measure-schema.json\").then(jsonify);\nconst dataSource = {\n  chart: {},\n  yaxis: [{\n    plot: {\n      value: \"Sale Amount\",\n      type: \"area\"\n    },\n    title: \"Sale Amount\",\n    format: {\n      prefix: \"$\"\n    }\n  }, {\n    plot: {\n      value: \"Units Sold\",\n      type: \"column\"\n    },\n    title: \"Units Sold\"\n  }]\n};\n\nclass ChartViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onFetchData = this.onFetchData.bind(this);\n    this.state = {\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"container\",\n        width: \"100%\",\n        height: \"100%\",\n        dataSource\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.onFetchData();\n  }\n\n  onFetchData() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      const fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.timeseriesDs.dataSource.data ? React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })) : \"loading\");\n  }\n\n}\n\nexport default ChartViewer; // import React, { useEffect, useState } from \"react\";\n// import { Card, Image, List, Header, Icon, Label, Menu, Table, Pagination} from \"semantic-ui-react\";\n// import axios from 'axios';\n// import ApexCharts from 'apexcharts'\n// export const ViewItemPriceChartAnalysis = ({ item_name }) => {\n//   const [priceHistory, setPriceHistory] = useState([]);\n//   useEffect(() => {\n//     axios\n//     .get(\"/view_item_price_history\", {\n//       params: {\n//         item_name,\n//       },\n//     })\n//     .then(({ data }) => {\n//       setPriceHistory(data.price_history);\n//     })\n//   }, []);\n//   return (\n//     <Table celled>\n//       <Table.Header>\n//         <Table.Row>\n//           <Table.HeaderCell>Date</Table.HeaderCell>\n//           <Table.HeaderCell>Price</Table.HeaderCell>\n//           <Table.HeaderCell>Volume</Table.HeaderCell>\n//         </Table.Row>\n//       </Table.Header>\n//       <Table.Body>\n//         {priceHistory.map(priceHistoryPoint => {\n//           console.log(priceHistoryPoint)\n//           return (\n//             <Table.Row>\n//               <Table.Cell>{priceHistoryPoint.price_history_point_date}</Table.Cell>\n//               <Table.Cell>{priceHistoryPoint.price_history_point_price}</Table.Cell>\n//               <Table.Cell>{priceHistoryPoint.price_history_point_volume}</Table.Cell>\n//             </Table.Row>\n//           )\n//         })}\n//       </Table.Body>\n//     </Table>\n//   );\n// };\n// export default ViewItemPriceChartAnalysis;","map":{"version":3,"sources":["C:/Users/Manrith/Documents/GitHub/Steam-Market-Analysis/Steam-Market-Analysis/front_end/src/components/ViewItemPriceChartAnalysis.js"],"names":["React","FusionCharts","TimeSeries","ReactFC","fcRoot","jsonify","res","json","dataFetch","fetch","then","schemaFetch","dataSource","chart","yaxis","plot","value","type","title","format","prefix","ChartViewer","Component","constructor","props","onFetchData","bind","state","timeseriesDs","renderAt","width","height","componentDidMount","Promise","all","data","schema","fusionTable","DataStore","createDataTable","Object","assign","setState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\r\nimport ReactFC from \"../../node_modules/react-fusioncharts\";\r\n\r\nReactFC.fcRoot(FusionCharts, TimeSeries);\r\n\r\n\r\n\r\n\r\n\r\nconst jsonify = res => res.json();\r\n\r\n\r\n\r\n\r\n//   useEffect(() => {\r\n//     axios\r\n//     .get(\"/view_item_price_history\", {\r\n//       params: {\r\n//         item_name,\r\n//       },\r\n//     })\r\n//     .then(({ data }) => {\r\n//       setPriceHistory(data.price_history);\r\n//     })\r\n//   }, []);\r\n\r\n\r\n\r\nconst dataFetch = fetch(\r\n  \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/different-plot-type-for-each-variable-measure-data.json\"\r\n).then(jsonify);\r\n\r\n\r\n\r\nconst schemaFetch = fetch(\r\n  \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/different-plot-type-for-each-variable-measure-schema.json\"\r\n).then(jsonify);\r\n\r\nconst dataSource = {\r\n  chart: {},\r\n  yaxis: [\r\n    {\r\n      plot: {\r\n        value: \"Sale Amount\",\r\n        type: \"area\"\r\n      },\r\n      title: \"Sale Amount\",\r\n      format: {\r\n        prefix: \"$\"\r\n      }\r\n    },\r\n    {\r\n      plot: {\r\n        value: \"Units Sold\",\r\n        type: \"column\"\r\n      },\r\n      title: \"Units Sold\"\r\n    }\r\n  ]\r\n};\r\n\r\nclass ChartViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onFetchData = this.onFetchData.bind(this);\r\n    this.state = {\r\n      timeseriesDs: {\r\n        type: \"timeseries\",\r\n        renderAt: \"container\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        dataSource\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onFetchData();\r\n  }\r\n\r\n  onFetchData() {\r\n    Promise.all([dataFetch, schemaFetch]).then(res => {\r\n      const data = res[0];\r\n      const schema = res[1];\r\n      const fusionTable = new FusionCharts.DataStore().createDataTable(\r\n        data,\r\n        schema\r\n      );\r\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\r\n      timeseriesDs.dataSource.data = fusionTable;\r\n      this.setState({\r\n        timeseriesDs\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.timeseriesDs.dataSource.data ? (\r\n          <ReactFC {...this.state.timeseriesDs} />\r\n        ) : (\r\n          \"loading\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartViewer;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { Card, Image, List, Header, Icon, Label, Menu, Table, Pagination} from \"semantic-ui-react\";\r\n// import axios from 'axios';\r\n// import ApexCharts from 'apexcharts'\r\n\r\n// export const ViewItemPriceChartAnalysis = ({ item_name }) => {\r\n//   const [priceHistory, setPriceHistory] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     axios\r\n//     .get(\"/view_item_price_history\", {\r\n//       params: {\r\n//         item_name,\r\n//       },\r\n//     })\r\n//     .then(({ data }) => {\r\n//       setPriceHistory(data.price_history);\r\n//     })\r\n//   }, []);\r\n\r\n//   return (\r\n//     <Table celled>\r\n//       <Table.Header>\r\n//         <Table.Row>\r\n//           <Table.HeaderCell>Date</Table.HeaderCell>\r\n//           <Table.HeaderCell>Price</Table.HeaderCell>\r\n//           <Table.HeaderCell>Volume</Table.HeaderCell>\r\n//         </Table.Row>\r\n//       </Table.Header>\r\n\r\n//       <Table.Body>\r\n//         {priceHistory.map(priceHistoryPoint => {\r\n//           console.log(priceHistoryPoint)\r\n//           return (\r\n//             <Table.Row>\r\n//               <Table.Cell>{priceHistoryPoint.price_history_point_date}</Table.Cell>\r\n//               <Table.Cell>{priceHistoryPoint.price_history_point_price}</Table.Cell>\r\n//               <Table.Cell>{priceHistoryPoint.price_history_point_volume}</Table.Cell>\r\n//             </Table.Row>\r\n//           )\r\n//         })}\r\n//       </Table.Body>\r\n//     </Table>\r\n//   );\r\n// };\r\n\r\n// export default ViewItemPriceChartAnalysis;\r\n"]},"metadata":{},"sourceType":"module"}