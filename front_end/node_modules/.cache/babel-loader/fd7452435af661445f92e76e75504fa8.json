{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manrith\\\\Documents\\\\GitHub\\\\Steam-Market-Analysis\\\\Steam-Market-Analysis\\\\front_end\\\\src\\\\components\\\\ViewItemPriceChartAnalysis.js\";\nimport React from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"react-fusioncharts/lib/ReactFC\";\nimport axios from 'axios';\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nclass ChartViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    const item_name = this.props.item_name;\n    this.dataFetch = axios.get(\"/item_price_history_data\", {\n      params: {\n        item_name\n      }\n    });\n    this.schemaFetch = [{\n      \"name\": \"Time\",\n      \"type\": \"date\",\n      \"format\": \"%-m/%-d/%Y %H:%M:%S\"\n    }, {\n      \"name\": \"Price\",\n      \"type\": \"number\"\n    }, {\n      \"name\": \"Volume\",\n      \"type\": \"number\"\n    }];\n    this.dataSource = {\n      chart: {},\n      yaxis: [{\n        plot: {\n          connectNullData: '1',\n          value: \"Price\",\n          type: \"msline\"\n        },\n        title: \"Price\",\n        format: {\n          prefix: \"$\"\n        }\n      }, {\n        plot: {\n          value: \"Volume\",\n          type: \"column\"\n        },\n        title: \"Volume\"\n      }]\n    };\n    this.state = {\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"container\",\n        width: \"100%\",\n        height: \"100%\",\n        dataSource: this.dataSource\n      }\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([this.dataFetch, this.schemaFetch]).then(res => {\n      const data = res[0].data.price_history;\n      const schema = res[1];\n      const fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.timeseriesDs.dataSource.data ? React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })) : \"loading\");\n  }\n\n}\n\nexport default ChartViewer;","map":{"version":3,"sources":["C:/Users/Manrith/Documents/GitHub/Steam-Market-Analysis/Steam-Market-Analysis/front_end/src/components/ViewItemPriceChartAnalysis.js"],"names":["React","FusionCharts","TimeSeries","ReactFC","axios","fcRoot","ChartViewer","Component","constructor","props","item_name","dataFetch","get","params","schemaFetch","dataSource","chart","yaxis","plot","connectNullData","value","type","title","format","prefix","state","timeseriesDs","renderAt","width","height","componentDidMount","Promise","all","then","res","data","price_history","schema","fusionTable","DataStore","createDataTable","Object","assign","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAD,OAAO,CAACE,MAAR,CAAeJ,YAAf,EAA6BC,UAA7B;;AAEA,MAAMI,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,UAAMC,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAA7B;AAEA,SAAKC,SAAL,GACEP,KAAK,CACJQ,GADD,CACK,0BADL,EACiC;AAC/BC,MAAAA,MAAM,EAAE;AACNH,QAAAA;AADM;AADuB,KADjC,CADF;AAQA,SAAKI,WAAL,GAAmB,CAAC;AAClB,cAAQ,MADU;AAElB,cAAQ,MAFU;AAGlB,gBAAU;AAHQ,KAAD,EAIhB;AACD,cAAQ,OADP;AAED,cAAQ;AAFP,KAJgB,EAOhB;AACD,cAAQ,QADP;AAED,cAAQ;AAFP,KAPgB,CAAnB;AAWA,SAAKC,UAAL,GAAkB;AAChBC,MAAAA,KAAK,EAAE,EADS;AAEhBC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,IAAI,EAAE;AACJC,UAAAA,eAAe,EAAE,GADb;AAEJC,UAAAA,KAAK,EAAE,OAFH;AAGJC,UAAAA,IAAI,EAAE;AAHF,SADR;AAMEC,QAAAA,KAAK,EAAE,OANT;AAOEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAE;AADF;AAPV,OADK,EAYL;AACEN,QAAAA,IAAI,EAAE;AACJE,UAAAA,KAAK,EAAE,QADH;AAEJC,UAAAA,IAAI,EAAE;AAFF,SADR;AAKEC,QAAAA,KAAK,EAAE;AALT,OAZK;AAFS,KAAlB;AAuBA,SAAKG,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AACZL,QAAAA,IAAI,EAAE,YADM;AAEZM,QAAAA,QAAQ,EAAE,WAFE;AAGZC,QAAAA,KAAK,EAAE,MAHK;AAIZC,QAAAA,MAAM,EAAE,MAJI;AAKZd,QAAAA,UAAU,EAAE,KAAKA;AALL;AADH,KAAb;AASD;;AAEDe,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,KAAKrB,SAAN,EAAiB,KAAKG,WAAtB,CAAZ,EAAgDmB,IAAhD,CAAqDC,GAAG,IAAI;AAC1D,YAAMC,IAAI,GAAGD,GAAG,CAAC,CAAD,CAAH,CAAOC,IAAP,CAAYC,aAAzB;AACA,YAAMC,MAAM,GAAGH,GAAG,CAAC,CAAD,CAAlB;AACA,YAAMI,WAAW,GAAG,IAAIrC,YAAY,CAACsC,SAAjB,GAA6BC,eAA7B,CAClBL,IADkB,EAElBE,MAFkB,CAApB;AAIA,YAAMX,YAAY,GAAGe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjB,KAAL,CAAWC,YAA7B,CAArB;AACAA,MAAAA,YAAY,CAACX,UAAb,CAAwBoB,IAAxB,GAA+BG,WAA/B;AACA,WAAKK,QAAL,CAAc;AACZjB,QAAAA;AADY,OAAd;AAGD,KAZD;AAaD;;AAEDkB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWC,YAAX,CAAwBX,UAAxB,CAAmCoB,IAAnC,GACC,oBAAC,OAAD,oBAAa,KAAKV,KAAL,CAAWC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,GAGC,SAJJ,CADF;AASD;;AArFuC;;AAwF1C,eAAepB,WAAf","sourcesContent":["import React from \"react\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\r\nimport ReactFC from \"react-fusioncharts/lib/ReactFC\";\r\nimport axios from 'axios';\r\n\r\nReactFC.fcRoot(FusionCharts, TimeSeries);\r\n\r\nclass ChartViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const item_name = this.props.item_name\r\n\r\n    this.dataFetch =\r\n      axios\r\n      .get(\"/item_price_history_data\", {\r\n        params: {\r\n          item_name,\r\n        },\r\n      })\r\n\r\n    this.schemaFetch = [{\r\n      \"name\": \"Time\",\r\n      \"type\": \"date\",\r\n      \"format\": \"%-m/%-d/%Y %H:%M:%S\"\r\n    }, {\r\n      \"name\": \"Price\",\r\n      \"type\": \"number\"\r\n    }, {\r\n      \"name\": \"Volume\",\r\n      \"type\": \"number\"\r\n    }];\r\n    this.dataSource = {\r\n      chart: {},\r\n      yaxis: [\r\n        {\r\n          plot: {\r\n            connectNullData: '1',\r\n            value: \"Price\",\r\n            type: \"msline\"\r\n          },\r\n          title: \"Price\",\r\n          format: {\r\n            prefix: \"$\"\r\n          }\r\n        },\r\n        {\r\n          plot: {\r\n            value: \"Volume\",\r\n            type: \"column\"\r\n          },\r\n          title: \"Volume\"\r\n        }\r\n      ]\r\n    };\r\n    this.state = {\r\n      timeseriesDs: {\r\n        type: \"timeseries\",\r\n        renderAt: \"container\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        dataSource: this.dataSource\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([this.dataFetch, this.schemaFetch]).then(res => {\r\n      const data = res[0].data.price_history;\r\n      const schema = res[1];\r\n      const fusionTable = new FusionCharts.DataStore().createDataTable(\r\n        data,\r\n        schema\r\n      );\r\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\r\n      timeseriesDs.dataSource.data = fusionTable;\r\n      this.setState({\r\n        timeseriesDs,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.timeseriesDs.dataSource.data ? (\r\n          <ReactFC {...this.state.timeseriesDs} />\r\n        ) : (\r\n          \"loading\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartViewer;\r\n"]},"metadata":{},"sourceType":"module"}