{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manrith\\\\Documents\\\\GitHub\\\\Steam-Market-Analysis\\\\Steam-Market-Analysis\\\\front_end\\\\src\\\\components\\\\ViewItemPriceChartAnalysis.js\";\nimport React from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"../../node_modules/react-fusioncharts\";\nReactFC.fcRoot(FusionCharts, TimeSeries);\nexport const ViewItemPriceChartAnalysis = ({\n  item_name\n}) => {\n  const jsonify = res => res.json();\n\n  const dataFetch = fetch(\"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/different-plot-type-for-each-variable-measure-data.json\").then(jsonify);\n  const schemaFetch = [{\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%-m/%-d/%Y %H:%M:%S\"\n  }, {\n    \"name\": \"Units Sold\",\n    \"type\": \"number\"\n  }, {\n    \"name\": \"Sale Amount\",\n    \"type\": \"number\"\n  }];\n  const dataSource = {\n    chart: {},\n    yaxis: [{\n      plot: {\n        value: \"Sale Amount\",\n        type: \"area\"\n      },\n      title: \"Sale Amount\",\n      format: {\n        prefix: \"$\"\n      }\n    }, {\n      plot: {\n        value: \"Units Sold\",\n        type: \"column\"\n      },\n      title: \"Units Sold\"\n    }]\n  };\n\n  class ViewChart extends React.Component {\n    constructor(props) {\n      super(props);\n      this.onFetchData = this.onFetchData.bind(this);\n      this.state = {\n        timeseriesDs: {\n          type: \"timeseries\",\n          renderAt: \"container\",\n          width: \"100%\",\n          height: \"100%\",\n          dataSource\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.onFetchData();\n    }\n\n    onFetchData() {\n      Promise.all([dataFetch, schemaFetch]).then(res => {\n        const data = res[0];\n        const schema = res[1];\n        const fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n        const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n        timeseriesDs.dataSource.data = fusionTable;\n        this.setState({\n          timeseriesDs\n        });\n      });\n    }\n\n    render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.state.timeseriesDs.dataSource.data ? React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })) : \"loading\");\n    }\n\n  }\n};\nexport default ViewItemPriceChartAnalysis; // import React, { useEffect, useState } from \"react\";\n// import { Card, Image, List, Header, Icon, Label, Menu, Table, Pagination} from \"semantic-ui-react\";\n// import axios from 'axios';\n// import ApexCharts from 'apexcharts'\n// export const ViewItemPriceChartAnalysis = ({ item_name }) => {\n//   const [priceHistory, setPriceHistory] = useState([]);\n//   useEffect(() => {\n//     axios\n//     .get(\"/view_item_price_history\", {\n//       params: {\n//         item_name,\n//       },\n//     })\n//     .then(({ data }) => {\n//       setPriceHistory(data.price_history);\n//     })\n//   }, []);\n//   return (\n//     <Table celled>\n//       <Table.Header>\n//         <Table.Row>\n//           <Table.HeaderCell>Date</Table.HeaderCell>\n//           <Table.HeaderCell>Price</Table.HeaderCell>\n//           <Table.HeaderCell>Volume</Table.HeaderCell>\n//         </Table.Row>\n//       </Table.Header>\n//       <Table.Body>\n//         {priceHistory.map(priceHistoryPoint => {\n//           console.log(priceHistoryPoint)\n//           return (\n//             <Table.Row>\n//               <Table.Cell>{priceHistoryPoint.price_history_point_date}</Table.Cell>\n//               <Table.Cell>{priceHistoryPoint.price_history_point_price}</Table.Cell>\n//               <Table.Cell>{priceHistoryPoint.price_history_point_volume}</Table.Cell>\n//             </Table.Row>\n//           )\n//         })}\n//       </Table.Body>\n//     </Table>\n//   );\n// };\n// export default ViewItemPriceChartAnalysis;","map":{"version":3,"sources":["C:/Users/Manrith/Documents/GitHub/Steam-Market-Analysis/Steam-Market-Analysis/front_end/src/components/ViewItemPriceChartAnalysis.js"],"names":["React","FusionCharts","TimeSeries","ReactFC","fcRoot","ViewItemPriceChartAnalysis","item_name","jsonify","res","json","dataFetch","fetch","then","schemaFetch","dataSource","chart","yaxis","plot","value","type","title","format","prefix","ViewChart","Component","constructor","props","onFetchData","bind","state","timeseriesDs","renderAt","width","height","componentDidMount","Promise","all","data","schema","fusionTable","DataStore","createDataTable","Object","assign","setState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\r\nimport ReactFC from \"../../node_modules/react-fusioncharts\";\r\n\r\nReactFC.fcRoot(FusionCharts, TimeSeries);\r\n\r\n\r\nexport const ViewItemPriceChartAnalysis = ({ item_name }) => {\r\n  const jsonify = res => res.json();\r\n\r\n  const dataFetch = fetch(\r\n    \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/different-plot-type-for-each-variable-measure-data.json\"\r\n  ).then(jsonify);\r\n  const schemaFetch = [{\r\n    \"name\": \"Time\",\r\n    \"type\": \"date\",\r\n    \"format\": \"%-m/%-d/%Y %H:%M:%S\"\r\n  }, {\r\n    \"name\": \"Units Sold\",\r\n    \"type\": \"number\"\r\n  }, {\r\n    \"name\": \"Sale Amount\",\r\n    \"type\": \"number\"\r\n  }];\r\n  const dataSource = {\r\n    chart: {},\r\n    yaxis: [\r\n      {\r\n        plot: {\r\n          value: \"Sale Amount\",\r\n          type: \"area\"\r\n        },\r\n        title: \"Sale Amount\",\r\n        format: {\r\n          prefix: \"$\"\r\n        }\r\n      },\r\n      {\r\n        plot: {\r\n          value: \"Units Sold\",\r\n          type: \"column\"\r\n        },\r\n        title: \"Units Sold\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  class ViewChart extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.onFetchData = this.onFetchData.bind(this);\r\n      this.state = {\r\n        timeseriesDs: {\r\n          type: \"timeseries\",\r\n          renderAt: \"container\",\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          dataSource\r\n        }\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.onFetchData();\r\n    }\r\n\r\n    onFetchData() {\r\n      Promise.all([dataFetch, schemaFetch]).then(res => {\r\n        const data = res[0];\r\n        const schema = res[1];\r\n        const fusionTable = new FusionCharts.DataStore().createDataTable(\r\n          data,\r\n          schema\r\n        );\r\n        const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\r\n        timeseriesDs.dataSource.data = fusionTable;\r\n        this.setState({\r\n          timeseriesDs\r\n        });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          {this.state.timeseriesDs.dataSource.data ? (\r\n            <ReactFC {...this.state.timeseriesDs} />\r\n          ) : (\r\n            \"loading\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default ViewItemPriceChartAnalysis;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { Card, Image, List, Header, Icon, Label, Menu, Table, Pagination} from \"semantic-ui-react\";\r\n// import axios from 'axios';\r\n// import ApexCharts from 'apexcharts'\r\n\r\n// export const ViewItemPriceChartAnalysis = ({ item_name }) => {\r\n//   const [priceHistory, setPriceHistory] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     axios\r\n//     .get(\"/view_item_price_history\", {\r\n//       params: {\r\n//         item_name,\r\n//       },\r\n//     })\r\n//     .then(({ data }) => {\r\n//       setPriceHistory(data.price_history);\r\n//     })\r\n//   }, []);\r\n\r\n//   return (\r\n//     <Table celled>\r\n//       <Table.Header>\r\n//         <Table.Row>\r\n//           <Table.HeaderCell>Date</Table.HeaderCell>\r\n//           <Table.HeaderCell>Price</Table.HeaderCell>\r\n//           <Table.HeaderCell>Volume</Table.HeaderCell>\r\n//         </Table.Row>\r\n//       </Table.Header>\r\n\r\n//       <Table.Body>\r\n//         {priceHistory.map(priceHistoryPoint => {\r\n//           console.log(priceHistoryPoint)\r\n//           return (\r\n//             <Table.Row>\r\n//               <Table.Cell>{priceHistoryPoint.price_history_point_date}</Table.Cell>\r\n//               <Table.Cell>{priceHistoryPoint.price_history_point_price}</Table.Cell>\r\n//               <Table.Cell>{priceHistoryPoint.price_history_point_volume}</Table.Cell>\r\n//             </Table.Row>\r\n//           )\r\n//         })}\r\n//       </Table.Body>\r\n//     </Table>\r\n//   );\r\n// };\r\n\r\n// export default ViewItemPriceChartAnalysis;\r\n"]},"metadata":{},"sourceType":"module"}