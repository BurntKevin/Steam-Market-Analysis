{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manrith\\\\Documents\\\\GitHub\\\\Steam-Market-Analysis\\\\Steam-Market-Analysis\\\\front_end\\\\src\\\\components\\\\ViewItemPriceChartAnalysis.js\";\nimport React from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"react-fusioncharts/lib/ReactFC\";\nimport axios from 'axios';\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n\nclass ChartViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    const item_name = this.props.item_name;\n    this.dataFetch = axios.get(\"/view_item_price_history_chart\", {\n      params: {\n        item_name\n      }\n    });\n    console.log(this.dataFetch); // this.dataFetch = fetch(\n    //   \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/different-plot-type-for-each-variable-measure-data.json\"\n    // ).then(jsonify);\n    // console.log(this.dataFetch)\n\n    this.schemaFetch = [{\n      \"name\": \"Time\",\n      \"type\": \"date\",\n      \"format\": \"%-m/%-d/%Y %H:%M:%S\"\n    }, {\n      \"name\": \"Units Sold\",\n      \"type\": \"number\"\n    }, {\n      \"name\": \"Sale Amount\",\n      \"type\": \"number\"\n    }];\n    this.dataSource = {\n      chart: {},\n      caption: {\n        text: \"Sales Performance\"\n      },\n      yaxis: [{\n        plot: {\n          value: \"Sale Amount\",\n          type: \"area\"\n        },\n        title: \"Sale Amount\",\n        format: {\n          prefix: \"$\"\n        }\n      }, {\n        plot: {\n          value: \"Units Sold\",\n          type: \"column\"\n        },\n        title: \"Units Sold\"\n      }]\n    };\n    this.state = {\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"container\",\n        width: \"100%\",\n        height: \"500\",\n        dataSource: this.dataSource\n      }\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([this.dataFetch, this.schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      const fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.timeseriesDs.dataSource.data ? React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })) : \"loading\");\n  }\n\n}\n\nexport default ChartViewer;","map":{"version":3,"sources":["C:/Users/Manrith/Documents/GitHub/Steam-Market-Analysis/Steam-Market-Analysis/front_end/src/components/ViewItemPriceChartAnalysis.js"],"names":["React","FusionCharts","TimeSeries","ReactFC","axios","fcRoot","jsonify","res","json","ChartViewer","Component","constructor","props","item_name","dataFetch","get","params","console","log","schemaFetch","dataSource","chart","caption","text","yaxis","plot","value","type","title","format","prefix","state","timeseriesDs","renderAt","width","height","componentDidMount","Promise","all","then","data","schema","fusionTable","DataStore","createDataTable","Object","assign","setState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\r\nimport ReactFC from \"react-fusioncharts/lib/ReactFC\";\r\nimport axios from 'axios';\r\n\r\nReactFC.fcRoot(FusionCharts, TimeSeries);\r\n\r\nconst jsonify = res => res.json();\r\n\r\nclass ChartViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const item_name = this.props.item_name\r\n    this.dataFetch =\r\n      axios\r\n      .get(\"/view_item_price_history_chart\", {\r\n        params: {\r\n          item_name,\r\n        },\r\n      })\r\n\r\n    console.log(this.dataFetch)\r\n\r\n\r\n    // this.dataFetch = fetch(\r\n    //   \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/different-plot-type-for-each-variable-measure-data.json\"\r\n    // ).then(jsonify);\r\n\r\n    // console.log(this.dataFetch)\r\n\r\n\r\n    this.schemaFetch = [{\r\n      \"name\": \"Time\",\r\n      \"type\": \"date\",\r\n      \"format\": \"%-m/%-d/%Y %H:%M:%S\"\r\n    }, {\r\n      \"name\": \"Units Sold\",\r\n      \"type\": \"number\"\r\n    }, {\r\n      \"name\": \"Sale Amount\",\r\n      \"type\": \"number\"\r\n    }];\r\n    this.dataSource = {\r\n      chart: {},\r\n      caption: {\r\n        text: \"Sales Performance\"\r\n      },\r\n      yaxis: [\r\n        {\r\n          plot: {\r\n            value: \"Sale Amount\",\r\n            type: \"area\"\r\n          },\r\n          title: \"Sale Amount\",\r\n          format: {\r\n            prefix: \"$\"\r\n          }\r\n        },\r\n        {\r\n          plot: {\r\n            value: \"Units Sold\",\r\n            type: \"column\"\r\n          },\r\n          title: \"Units Sold\"\r\n        }\r\n      ]\r\n    };\r\n    this.state = {\r\n      timeseriesDs: {\r\n        type: \"timeseries\",\r\n        renderAt: \"container\",\r\n        width: \"100%\",\r\n        height: \"500\",\r\n        dataSource: this.dataSource\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n\r\n\r\n    Promise.all([this.dataFetch, this.schemaFetch]).then(res => {\r\n      const data = res[0];\r\n      const schema = res[1];\r\n      const fusionTable = new FusionCharts.DataStore().createDataTable(\r\n        data,\r\n        schema\r\n      );\r\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\r\n      timeseriesDs.dataSource.data = fusionTable;\r\n      this.setState({\r\n        timeseriesDs\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.timeseriesDs.dataSource.data ? (\r\n          <ReactFC {...this.state.timeseriesDs} />\r\n        ) : (\r\n          \"loading\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartViewer;\r\n"]},"metadata":{},"sourceType":"module"}